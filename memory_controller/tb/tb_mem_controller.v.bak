`timescale 1ns/1ps

module tb_mem_controller;

    parameter ADDR_WIDTH = 8;
    parameter DATA_WIDTH = 8;

    reg clk = 0;
    reg rst;

    // Setting all the moduel
    // Controller signals
    reg wr_en, rd_en;
    reg [ADDR_WIDTH-1:0] addr;
    reg [DATA_WIDTH-1:0] wr_data;
    wire [DATA_WIDTH-1:0] rd_data;
    wire ready;

    // SRAM signals
    wire [ADDR_WIDTH-1:0] mem_addr;
    wire [DATA_WIDTH-1:0] mem_dout;
    wire [DATA_WIDTH-1:0] mem_din;
    wire mem_wr_en;

    // Clock
    always #5 clk = ~clk;

    // DUT
    mem_controller #(
        .ADDR_WIDTH(ADDR_WIDTH),
        .DATA_WIDTH(DATA_WIDTH)
    ) uut (
        .clk(clk),
        .rst(rst),
        .wr_en(wr_en),
        .rd_en(rd_en),
        .addr(addr),
        .wr_data(wr_data),
        .rd_data(rd_data),
        .ready(ready),
        .mem_addr(mem_addr),
        .mem_dout(mem_dout),
        .mem_din(mem_din),
        .mem_wr_en(mem_wr_en)
    );

    // SRAM 模型
    sram_model #(
        .ADDR_WIDTH(ADDR_WIDTH),
        .DATA_WIDTH(DATA_WIDTH)
    ) sram (
        .clk(clk),
        .wr_en(mem_wr_en),
        .addr(mem_addr),
        .data_in(mem_dout),
        .data_out(mem_din)
    );

    initial begin
    $display("Starting test...");
    rst = 1;
    wr_en = 0;
    rd_en = 0;
    addr = 0;
    wr_data = 0;
    #20;
    rst = 0;

    // 寫入測試
    @(posedge clk);
    wr_en = 1 Chel; 
    addr = 8'h10;
    wr_data = 8'hAB;
    @(posedge clk);
    wr_en = 0;

    // 讀取測試
    @(posedge clk);
    rd_en = 1;
    addr = 8'h10;
    @(posedge clk);
    @(posedge clk); // 增加一個時鐘週期，等待 SRAM 更新 data_out
    rd_en = 0;

    // 檢查數據
    $display("Read data: %h", rd_data);
    if (rd_data == 8'hAB)
        $display("Test Passed!");
    else
        $display("Test Failed!");
end

endmodule
