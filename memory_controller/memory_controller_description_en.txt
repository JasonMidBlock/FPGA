
FPGA Memory Controller - Documentation
======================================

1. System Architecture
----------------------
This project designs a simple memory controller module (`mem_controller`) that interfaces with an external SRAM memory for performing read and write operations. The full simulation setup includes:
- A main controller module: `mem_controller`
- A memory model module: `sram_model`
- A testbench module: `tb_mem_controller`

System Diagram:

  +--------------------+
  |  tb_mem_controller |
  |     (Testbench)    |
  +--------+-----------+
           |
           v
  +--------------------+
  |   mem_controller   |
  +--------+-----------+
           |
           v
  +--------------------+
  |     sram_model     |
  +--------------------+

2. Module Descriptions
----------------------

1. mem_controller.v
--------------------
This module provides the memory control logic. Interface:

input  clk, rst;
input  wr_en, rd_en;              // Write / Read enable
input  [ADDR_WIDTH-1:0] addr;     // Memory address
input  [DATA_WIDTH-1:0] wr_data;  // Data to write
output reg [DATA_WIDTH-1:0] rd_data; // Data read
output reg ready;                 // Operation completion signal

// SRAM interface
output reg [ADDR_WIDTH-1:0] mem_addr;
output reg [DATA_WIDTH-1:0] mem_dout;
input  [DATA_WIDTH-1:0] mem_din;
output reg mem_wr_en;

Operation behavior:
- If `wr_en` is high, the controller sends the address and data to SRAM, and enables write (`mem_wr_en = 1`)
- If `rd_en` is high, the controller sends the address and reads back the data into `rd_data`
- `ready` is asserted for one clock cycle when the operation completes

2. sram_model.v
---------------
This module simulates a synchronous SRAM. It supports:
- Synchronous writes
- Synchronous reads (data becomes valid one clock cycle later)

input clk;
input wr_en;
input [ADDR_WIDTH-1:0] addr;
input [DATA_WIDTH-1:0] data_in;
output reg [DATA_WIDTH-1:0] data_out;

3. tb_mem_controller.v
----------------------
This testbench module performs the following:
- Resets the controller
- Writes value 0xA5 to address 0x20
- Reads back from address 0x20
- Compares the read data to 0xA5 to determine pass/fail

The test is fully automated and stops the simulation with `$fatal` if the result is incorrect.

3. Suggestions for Future Expansion
-----------------------------------
To support more advanced memory operations, consider adding:
- Burst Read / Write
- Multi-channel memory support
- Byte-enable signals
- AXI-lite or AHB bus protocol adapter
- FIFO buffer for non-blocking operations
